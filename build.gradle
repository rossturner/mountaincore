if (JavaVersion.current() != JavaVersion.VERSION_17) {
    throw new GradleException("This build must be run with java 17, is currently " + JavaVersion.current())
} else {
    System.out.println("Java version: " + JavaVersion.current())
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath group: 'org.mini2Dx', name: 'butler', version: '1.1.3'
    }
}

def getTime() {
    def date = new Date()
    return date.format('HHmm')
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    version = 'Early Access 1.2.1'
    ext {
        appName = 'mountaincore'
        gdxVersion = '1.11.0'
        visUiVersion = '1.4.4'
        roboVMVersion = '1.0.0-SNAPSHOT'
        ashleyVersion = '1.3.1'
        aiVersion = '1.8.0'
        epicVersion = version.replaceAll(" ", "_") + "-" + getTime()
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }

}

subprojects {
    apply plugin: "java-library"
    sourceCompatibility = 17
    targetCompatibility = 17
}

project(":desktop") {

    dependencies {
        implementation project(":core")
//        implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion" // Now part of core module (code smell)
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        api ("games.spooky.gdx:gdx-nativefilechooser-desktop:1.0.0") {
            exclude group: 'com.badlogicgames.gdx', module: 'gdx-backend-lwjgl'
        }
        api "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion"
        api group: 'com.amazonaws', name: 'aws-java-sdk-translate', version: '1.11.708'
    }

    clean.doFirst {
        file('../release_tools/win64_release').deleteDir()
        file('../release_tools/win64_tool').deleteDir()
        file('../release_tools/linux64_release').deleteDir()
        file('../release_tools/macosx_release').deleteDir()
        file('../release_tools/epic_upload').deleteDir()
        file('../core/assets/editor-state.json').delete()
    }

    task('packrWin', type: JavaExec, dependsOn: 'dist') {
        workingDir '../release_tools'
        main '-jar'
        args = ["packr-all-4.0.0.jar", "win-config.json"]
    }
    task('packrMac', type: JavaExec, dependsOn: 'dist') {
        workingDir '../release_tools'
        main '-jar'
        args = ["packr-all-4.0.0.jar", "mac-config.json"]
    }
    task('packrLinux', type: JavaExec, dependsOn: 'dist') {
        workingDir '../release_tools'
        main '-jar'
        args = ["packr-all-4.0.0.jar", "linux-config.json"]
    }


    task('packrToolWin', type: JavaExec, dependsOn: 'dist') {
        workingDir '../release_tools'
        main '-jar'
        args = ["packr-all-4.0.0.jar", "win-editor-tool-config.json"]
    }

    task('iconWin', type: Exec, dependsOn: 'packrWin') {
        workingDir '../release_tools'
        commandLine 'cmd', '/c', 'rcedit-x64.exe', '"win64_release/Mountaincore.exe"', '--set-icon', '"icon/Steam_Icon_128x128.ico"'
    }
    task('iconToolWin', type: Exec, dependsOn: 'packrToolWin') {
        workingDir '../release_tools'
        commandLine 'cmd', '/c', 'rcedit-x64.exe', '"win64_tool/Asset Editor Tool.exe"', '--set-icon', '"icon/carpenter.ico"'
    }

    task('moveToolWin', type: Copy, dependsOn: ['iconWin', 'iconToolWin']) {
        from '../release_tools/win64_tool'
        into '../release_tools/win64_release'
        include '*.exe'
        include '*.json'
    }

    task('zipWin', type: Zip, dependsOn: 'iconWin') {
        archiveFileName = "Mountaincore $project.version win64.zip"
        destinationDirectory = file("../release_tools")
        from "../release_tools/win64_release"
    }
    task('zipMac', type: Zip, dependsOn: 'packrMac') {
        archiveFileName = "Mountaincore $project.version macosx.zip"
        destinationDirectory = file("../release_tools")
        from "../release_tools/macosx_release"
    }
    task('zipLinux', type: Zip, dependsOn: 'packrLinux') {
        archiveFileName = "Mountaincore $project.version linux64.zip"
        destinationDirectory = file("../release_tools")
        from "../release_tools/linux64_release"
    }

    task('butlerWin', type: Exec, dependsOn: 'moveToolWin') {
        workingDir '../release_tools'
        commandLine 'butler', 'push', 'win64_release', 'rocketjumptechnology/mountaincore:win', '--userversion', "$project.version"
    }
    task('butlerMac', type: Exec, dependsOn: 'packrMac') {
        workingDir '../release_tools'
        commandLine 'butler', 'push', 'macosx_release', 'rocketjumptechnology/mountaincore:osx', '--userversion', "$project.version"
    }
    task('butlerLinux', type: Exec, dependsOn: 'packrLinux') {
        workingDir '../release_tools'
        commandLine 'butler', 'push', 'linux64_release', 'rocketjumptechnology/mountaincore:linux', '--userversion', "$project.version"
    }

    task('zipAll') {
        dependsOn 'zipLinux'
        dependsOn 'zipMac'
        dependsOn 'zipWin'
    }

    task('packr') {
        dependsOn 'packrLinux'
        dependsOn 'packrMac'
        dependsOn 'moveToolWin'
    }

    task('epicUploadWin', type: Exec, dependsOn: 'moveToolWin') {
        workingDir '..'
        commandLine "${rootDir}\\release_tools\\Epic_BuildPatchTool_1.5.1\\Engine\\Binaries\\Win64\\BuildPatchTool.exe",
                "-ClientId=\"xyza7891V44W4RAVHy6IwDFq37jtpkAQ\"",
                "-ClientSecretEnvVar=\"EPIC_SECRET\"",
                "-OrganizationId=\"o-9wdpdvs2cxr8wmqdmwwaqclav8gbec\"",
                "-ProductId=\"dc4547eedc0d450eb22bf89c192117cd\"",
                "-ArtifactId=\"0d16fe61e67745a3a4d3e39076e39d21\"",
                "-mode=UploadBinary",
                "-BuildRoot=\"${rootDir}\\release_tools\\win64_release\"",
                "-CloudDir=\"${rootDir}\\release_tools\\epic_upload\"",
                "-BuildVersion=\"${epicVersion}-Win\"",
                "-AppLaunch=\"Mountaincore.exe\"",
                "-AppArgs=\"\""
    }
    task('epicUploadMac', type: Exec, dependsOn: 'packrMac') {
        workingDir '..'
        commandLine "${rootDir}\\release_tools\\Epic_BuildPatchTool_1.5.1\\Engine\\Binaries\\Win64\\BuildPatchTool.exe",
                "-ClientId=\"xyza7891V44W4RAVHy6IwDFq37jtpkAQ\"",
                "-ClientSecretEnvVar=\"EPIC_SECRET\"",
                "-OrganizationId=\"o-9wdpdvs2cxr8wmqdmwwaqclav8gbec\"",
                "-ProductId=\"dc4547eedc0d450eb22bf89c192117cd\"",
                "-ArtifactId=\"0d16fe61e67745a3a4d3e39076e39d21\"",
                "-mode=UploadBinary",
                "-BuildRoot=\"${rootDir}\\release_tools\\macosx_release\"",
                "-CloudDir=\"${rootDir}\\release_tools\\epic_upload_mac\"",
                "-BuildVersion=\"${epicVersion}-Mac\"",
                "-AppLaunch=\"Contents/MacOs/Mountaincore\"",
                "-AppArgs=\"\""
    }

    task('release') {
        dependsOn 'butlerLinux'
        dependsOn 'butlerMac'
        dependsOn 'butlerWin'
        dependsOn 'epicUploadWin'
        dependsOn 'epicUploadMac'
    }
}

project(":core") {

    dependencies {
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-ai:$aiVersion"
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion" // This is only here to multi-thread audio
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        api("com.badlogicgames.gdx:gdx-tools:$gdxVersion") {
            exclude group: 'com.badlogicgames.gdx', module: 'gdx-backend-lwjgl'
        }
        api "games.spooky.gdx:gdx-nativefilechooser:1.0.0"
        api 'com.google.inject:guice:4.2.3:no_aop'
        api "com.kotcrab.vis:vis-ui:$visUiVersion"

        api 'com.github.raeleus.TenPatch:tenpatch:5.2.3'

        api "commons-io:commons-io:2.4"
        api "org.apache.commons:commons-csv:1.3"
        api "org.apache.commons:commons-lang3:3.4"
        api "org.apache.commons:commons-compress:1.20"
        api 'commons-beanutils:commons-beanutils:1.9.4'

        api "com.alibaba:fastjson:1.2.83"
        api "com.fasterxml.jackson.core:jackson-databind:2.6.4"
        api 'org.reflections:reflections:0.9.11'
        api "org.tinylog:tinylog:1.3.4"
        api 'com.squareup.okhttp3:okhttp:3.10.0'

        api 'com.brsanthu:google-analytics-java:2.0.0' // comes with slf4j which is no-op below
        api group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.25'
        api 'net.openhft:zero-allocation-hashing:0.9'
        api group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
        implementation "com.code-disaster.steamworks4j:steamworks4j:1.9.0"
        implementation "com.code-disaster.steamworks4j:steamworks4j-server:1.9.0"

        testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        testImplementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    }

    task createProperties {
        def version = project.version.toString()
        def file = new File("$projectDir/src/main/resources/version.txt")
        file.write(version)
    }

    classes.dependsOn createProperties
}

subprojects() {
    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
        testImplementation 'org.assertj:assertj-core:3.23.1' //successor to fest
        testImplementation 'org.easytesting:fest-assert:1.4'
        testImplementation 'org.mockito:mockito-core:3.5.13'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }
}

tasks.eclipse.doLast {
    delete ".project"
}